Доделать задания из списка:

Задание 1: Создание базового класса и производных классов
1. Создайте базовый класс Shape, который будет иметь виртуальную функцию draw().
2. Создайте два производных класса: Circle и Square, которые переопределяют метод draw(), выводя на экран соответствующее сообщение (например, "Рисуем круг" и "Рисуем квадрат").
3. Напишите функцию, которая принимает указатель на базовый класс Shape и вызывает метод draw().
Ожидаемый результат: Студенты должны увидеть, как работает полиморфизм при вызове метода draw() через указатель на базовый класс.

Задание 2: Использование массива указателей на базовые классы
1. Создайте массив указателей на объекты базового класса Shape.
2. Заполните массив объектами производных классов Circle и Square.
3. Напишите цикл, который проходит по массиву и вызывает метод draw() для каждого элемента.
Ожидаемый результат: Студенты должны понять, как можно хранить разные типы объектов в одном массиве и вызывать их методы через базовый класс.

Задание 3: Исследование представления объектов в памяти
1. Добавьте в класс Shape поле name (тип std::string) и метод для его установки.
2. В каждом производном классе добавьте поле area (тип double) и метод для его вычисления.
3. Используйте оператор sizeof для определения размера объектов базового и производных классов. Выведите результаты на экран.
Ожидаемый результат: Студенты должны увидеть, как размеры объектов зависят от их структуры и как полиморфизм влияет на использование памяти.

Задание 4: Работа с коллекцией фигур (1)
Цель: Создать коллекцию объектов различных фигур и управлять ими через базовый класс.
Описание: Создайте базовый класс Shape с виртуальной функцией draw() и getArea(). Реализуйте производные классы Circle, Square и Triangle, которые переопределяют методы draw() и getArea(). Создайте класс ShapeCollection, который будет содержать вектор указателей на Shape. Реализуйте методы для добавления фигур и вывода их на экран.
Требования: В классе ShapeCollection добавьте метод drawAll(), который вызывает draw() для всех фигур в коллекции. В функции main() создайте экземпляр ShapeCollection, добавьте в него несколько фигур и вызовите метод drawAll().
Ожидаемый результат: Студенты увидят, как можно управлять коллекцией объектов разных типов через указатели на базовый класс.

Задание 5: Полиморфизм и обработка событий (1)
Цель: Реализовать систему обработки событий с использованием полиморфизма.
Описание: Создайте базовый класс Event с виртуальной функцией handle(). Создайте производные классы MouseEvent и KeyboardEvent, которые переопределяют метод handle(), выводя соответствующее сообщение (например, "Обработка события мыши" и "Обработка события клавиатуры"). Создайте класс EventManager, который будет хранить вектор указателей на Event и иметь метод для обработки всех событий.
Требования: В классе EventManager добавьте метод processEvents(), который вызывает handle() для каждого события. В функции main() создайте экземпляр EventManager, добавьте в него несколько событий и вызовите метод processEvents().
Ожидаемый результат: Студенты поймут, как использовать полиморфизм для обработки различных типов событий в одной системе.

Задание 6: Динамическое создание объектов (1)
Цель: Изучить динамическое создание объектов производных классов через указатель на базовый класс.
Описание: Создайте базовый класс Animal с виртуальной функцией speak(). Реализуйте производные классы Dog и Cat, которые переопределяют метод speak(). Напишите функцию, которая принимает строку (тип животного) и возвращает указатель на созданный объект соответствующего класса.
Требования: В функции main() создайте массив указателей на Animal, заполните его динамически созданными объектами Dog и Cat, и вызовите метод speak() для каждого животного. Не забудьте освободить память после использования объектов.
Ожидаемый результат: Студенты увидят, как можно динамически создавать объекты разных типов и управлять ими через указатели на базовый класс.

Задание 7: Полиморфизм и интерфейсы (2)
Цель: Понять, как использовать полиморфизм для создания интерфейсов.
Описание: Создайте базовый класс Playable с виртуальной функцией play(). Реализуйте производные классы Song и Video, которые переопределяют метод play(), выводя соответствующее сообщение (например, "Играет песня" и "Воспроизводится видео"). Создайте класс MediaPlayer, который будет содержать вектор указателей на Playable и метод для воспроизведения всех медиа.
Требования: В функции main() создайте экземпляр MediaPlayer, добавьте в него несколько объектов Song и Video, и вызовите метод воспроизведения.
Ожидаемый результат: Студенты увидят, как можно использовать полиморфизм для работы с различными типами медиа через общий интерфейс.

Задание 8: Полиморфизм и обработка ошибок (2)
Цель: Изучить, как полиморфизм может быть использован для обработки ошибок.
Описание: Создайте базовый класс Error с виртуальной функцией logError(). Реализуйте производные классы FileError и NetworkError, которые переопределяют метод logError(), выводя соответствующее сообщение об ошибке. Создайте класс ErrorManager, который будет хранить вектор указателей на Error и иметь метод для логирования всех ошибок.
Требования: В функции main() создайте экземпляр ErrorManager, добавьте в него несколько объектов FileError и NetworkError, и вызовите метод логирования.
Ожидаемый результат: Студенты поймут, как использовать полиморфизм для обработки различных типов ошибок в одной системе.

Задание 9: Полиморфизм и графические примитивы (2)
Цель: Изучить применение полиморфизма в графических приложениях.
Описание: Создайте базовый класс Graphic с виртуальной функцией render(). Реализуйте производные классы Line, Rectangle и Triangle, которые переопределяют метод render(), выводя соответствующее сообщение о рисовании. Создайте класс GraphicEditor, который будет содержать вектор указателей на Graphic и метод для рендеринга всех графических примитивов.
Требования: В функции main() создайте экземпляр GraphicEditor, добавьте в него несколько объектов Line, Rectangle и Triangle, и вызовите метод рендеринга.
Ожидаемый результат: Студенты увидят, как полиморфизм может быть использован для работы с различными графическими примитивами в одном редакторе.

Задание 10: Полиморфизм и игры (2)
Цель: Применить полиморфизм в контексте игровой разработки.
Описание: Создайте базовый класс GameObject с виртуальной функцией update(). Реализуйте производные классы Player, Enemy и Item, которые переопределяют метод update(), выводя соответствующее сообщение о действиях объекта. Создайте класс Game, который будет содержать вектор указателей на GameObject и метод для обновления всех объектов.
Требования: В функции main() создайте экземпляр Game, добавьте в него несколько объектов Player, Enemy и Item, и вызовите метод обновления.
Ожидаемый результат: Студенты поймут, как полиморфизм может быть использован для управления различными игровыми объектами в одной игре.

в lesson 19