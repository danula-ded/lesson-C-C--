Доделать задания из списка:

Задача 1: Система учета студентов
Описание: Создайте программу для учета студентов, использующую std::unordered_map для хранения информации о студентах по их идентификационным номерам. Программа должна позволять добавлять, удалять и искать студентов, а также выводить список всех студентов.

Задача 2: Сортировка строк по длине
Описание: Напишите программу, которая считывает набор строк и использует std::vector для их хранения. Реализуйте сортировку строк по их длине с использованием std::sort. После сортировки выведите строки на экран.

Задача 3: Уникальные элементы
Описание: Создайте программу, которая принимает на вход массив целых чисел и использует std::set для нахождения уникальных элементов. Программа должна выводить уникальные элементы в порядке возрастания.

Задача 4: Игра "Словесный ассоциативный ряд" (1 – 2)
Описание: Создайте программу, которая позволяет пользователю вводить слова. Каждое новое слово должно начинаться с последней буквы предыдущего. Используйте std::set для хранения уникальных слов и проверки на повторения. Программа должна завершаться, когда пользователь введет слово, не соответствующее правилам.

Задача 5: Анализ текстов (1 – 2)
Описание: Напишите программу, которая считывает текст из файла и использует std::map для подсчета частоты появления каждой буквы (игнорируя регистр). Выведите буквы и их частоту в порядке убывания.

Задача 6: Сортировка по нескольким критериям (2)
Описание: Создайте структуру для хранения информации о книгах (название, автор, год издания). Используйте std::vector для хранения книг и реализуйте сортировку по автору, а затем по году издания с использованием std::sort и пользовательского компаратора.

Задача 7: Кэширование результатов (1)
Описание: Напишите программу, которая реализует кэширование результатов вычисления функции (например, факториала) с использованием std::unordered_map. Программа должна запрашивать у пользователя число и выводить его факториал, используя кэш для ускорения вычислений.

Задача 8: Графы и поиск в ширину (3)
Описание: Создайте класс для представления графа с использованием std::vector и std::list. Реализуйте алгоритм поиска в ширину (BFS) для нахождения кратчайшего пути между двумя вершинами.

Задача 9: Система управления задачами (2)
Описание: Разработайте программу для управления задачами с использованием std::priority_queue. Каждая задача должна иметь приоритет и описание. Программа должна позволять добавлять задачи, извлекать задачу с наивысшим приоритетом и отображать все текущие задачи.

Задача 10: Словарь с автозаполнением (1 – 2)
Описание: Создайте программу, которая использует std::trie (префиксное дерево) для реализации словаря с функцией автозаполнения. Пользователь должен вводить префикс, и программа должна выводить все слова, начинающиеся с этого префикса.

Задача 11: Обработка данных о студентах (1)
Описание: Напишите программу, которая считывает данные о студентах (имя, возраст, средний балл) из файла и использует std::vector для хранения. Реализуйте функции для поиска студентов по имени и фильтрации по среднему баллу.

Задача 12: Игра "Крестики-нолики" (2 – 3)
Описание: Создайте консольную игру "Крестики-нолики" с использованием std::array для представления игрового поля. Реализуйте логику игры, проверку победителя и возможность играть против компьютера.

Задача 13: Генерация случайных паролей (1)
Описание: Напишите программу, которая генерирует случайные пароли заданной длины, используя std::string и std::vector для хранения символов. Программа должна позволять пользователю выбирать, включать ли в пароль буквы, цифры и специальные символы.

Задача 14: Калькулятор выражений (2)
Описание: Разработайте простой калькулятор, который принимает математическое выражение в виде строки (например, "3 + 4 * 2") и использует std::stack для вычисления результата. Программа должна поддерживать операции сложения, вычитания, умножения и деления.